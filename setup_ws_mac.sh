#!/bin/zsh

echo "ðŸš€ Starting your terminal upgrade with checks..."
echo "You may be prompted for your password."

# --- 1. Check/Install Homebrew ---
if ! command -v brew &> /dev/null; then
  echo "Installing Homebrew..."
  /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
  
  echo "Adding Homebrew to your PATH in ~/.zprofile..."
  if [ -d "/opt/homebrew" ]; then
    # Apple Silicon
    eval "$(/opt/homebrew/bin/brew shellenv)"
    echo 'eval "$(/opt/homebrew/bin/brew shellenv)"' >> ~/.zprofile
  else
    # Intel
    eval "$(/usr/local/bin/brew shellenv)"
    echo 'eval "$(/usr/local/bin/brew shellenv)"' >> ~/.zprofile
  fi
else
  echo "âœ… Homebrew is already installed. Updating..."
  brew update
fi

# --- 2. Check/Install Apps, Fonts, and Tools via Homebrew ---
echo "Checking Homebrew packages..."
brew tap homebrew/cask-fonts

casks_to_install=(
  "iterm2"
  "font-hack-nerd-font"
)
formulas_to_install=(
  "bat"
  "eza" # <-- This is the fix
  "fzf"
  "btop"
  "neovim"
  "ripgrep"
  "fd"
  "lazygit"
)

for cask in "${casks_to_install[@]}"; do
  if brew list --cask "$cask" &> /dev/null; then
    echo "âœ… $cask is already installed. Skipping."
  else
    echo "Installing $cask..."
    brew install --cask "$cask"
  fi
done

for formula in "${formulas_to_install[@]}"; do
  if brew list "$formula" &> /dev/null; then
    echo "âœ… $formula is already installed. Skipping."
  else
    echo "Installing $formula..."
    brew install "$formula"
  fi
done

# --- 3. Check/Install Oh My Zsh ---
if [ -d "$HOME/.oh-my-zsh" ]; then
  echo "âœ… Oh My Zsh is already installed. Skipping."
else
  echo "Installing Oh My Zsh..."
  export RUNZSH=no
  export CHSH=no
  sh -c "$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)" "" --unattended
fi

# --- 4. Check/Install Powerlevel10k Theme ---
P10K_DIR="${ZSH_CUSTOM:-$HOME/.oh-my-zsh/custom}/themes/powerlevel10k"
if [ -d "$P10K_DIR" ]; then
  echo "âœ… Powerlevel10k theme is already installed. Skipping."
else
  echo "Installing Powerlevel10k theme..."
  git clone --depth=1 https://github.com/romkatv/powerlevel10k.git "$P10K_DIR"
fi

# --- 5. Check/Activate Powerlevel10k Theme in .zshrc ---
if grep -q 'ZSH_THEME="powerlevel10k/powerlevel10k"' ~/.zshrc; then
  echo "âœ… Powerlevel10k theme is already active in ~/.zshrc. Skipping."
else
  echo "Activating Powerlevel10k theme in ~/.zshrc..."
  sed -i.bak 's/ZSH_THEME=".*"/ZSH_THEME="powerlevel10k\/powerlevel10k"/' ~/.zshrc
fi

# --- 6. Check/Configure fzf ---
if grep -q "source ~/.fzf.zsh" ~/.zshrc; then
  echo "âœ… fzf keybindings appear to be configured. Skipping."
else
  echo "Configuring fzf keybindings..."
  $(brew --prefix)/opt/fzf/install --all
fi

# --- 7. AUTOMATION: Create default .p10k.zsh to skip wizard ---
P10K_CONFIG_FILE="$HOME/.p10k.zsh"
if [ -f "$P10K_CONFIG_FILE" ]; then
  echo "âœ… Found existing $P10K_CONFIG_FILE. Skipping wizard."
else
  echo "Creating default $P10K_CONFIG_FILE to skip p10k wizard..."
  cat << 'EOF' > "$P10K_CONFIG_FILE"
# Generated by Gemini's automation script.
# This file suppresses the p10k configure wizard.
# For full customization, run 'p10k configure'.
typeset -g POWERLEVEL9K_CURRENT_DIR_FOREGROUND=254
typeset -g POWERLEVEL9K_CURRENT_DIR_BACKGROUND=31
typeset -g POWERLEVEL9K_DIR_ANCHOR_FOREGROUND=254
typeset -g POWERLEVEL9K_DIR_ANCHOR_BACKGROUND=31
typeset -g POWERLEVEL9K_VCS_CLEAN_FOREGROUND=15
typeset -g POWERLEVEL9K_VCS_CLEAN_BACKGROUND=2
typeset -g POWERLEVEL9K_VCS_MODIFIED_FOREGROUND=0
typeset -g POWERLEVEL9K_VCS_MODIFIED_BACKGROUND=3
typeset -g POWERLEVEL9K_VCS_UNTRACKED_FOREGROUND=0
typeset -g POWERLEVEL9K_VCS_UNTRACKED_BACKGROUND=3
typeset -g POWERLEVEL9K_PROMPT_CHAR_OK_VIINS_FOREGROUND=2
typeset -g POWERLEVEL9K_PROMPT_CHAR_OK_VIINS_BACKGROUND=15
typeset -g POWERLEVEL9K_PROMPT_CHAR_ERROR_VIINS_FOREGROUND=1
typeset -g POWERLEVEL9K_PROMPT_CHAR_ERROR_VIINS_BACKGROUND=15
typeset -g POWERLEVEL9K_PROMPT_CHAR_OK_VICMD_FOREGROUND=2
typeset -g POWERLEVEL9K_PROMPT_CHAR_OK_VICMD_BACKGROUND=15
typeset -g POWERLEVEL9K_PROMPT_CHAR_ERROR_VICMD_FOREGROUND=1
typeset -g POWERLEVEL9K_PROMPT_CHAR_ERROR_VICMD_BACKGROUND=15
typeset -g POWERLEVEL9K_PROMPT_CHAR_OK_VIVIS_FOREGROUND=2
typeset -g POWERLEVEL9K_PROMPT_CHAR_OK_VIVIS_BACKGROUND=15
typeset -g POWERLEVEL9K_PROMPT_CHAR_ERROR_VIVIS_FOREGROUND=1
typeset -g POWERLEVEL9K_PROMPT_CHAR_ERROR_VIVIS_BACKGROUND=15
typeset -g POWERLEVEL9K_PROMPT_CHAR_OK_VIOWR_FOREGROUND=2
typeset -g POWERLEVEL9K_PROMPT_CHAR_OK_VIOWR_BACKGROUND=15
typeset -g POWERLEVEL9K_PROMPT_CHAR_ERROR_VIOWR_FOREGROUND=1
typeset -g POWERLEVEL9K_PROMPT_CHAR_ERROR_VIOWR_BACKGROUND=15
typeset -g POWERLEVEL9K_MODE=nerdfont-complete
typeset -g POWERLEVEL9K_LEFT_PROMPT_ELEMENTS=( os_icon dir vcs )
typeset -g POWERLEVEL9K_RIGHT_PROMPT_ELEMENTS=( status command_execution_time time )
typeset -g POWERLEVEL9K_PROMPT_ADD_NEWLINE=true
typeset -g POWERLEVEL9K_SHORTEN_DIR_LENGTH=1
typeset -g POWERLEVEL9K_SHORTEN_STRATEGY=truncate_from_right
typeset -g POWERLEVEL9K_DIR_MAX_LENGTH=80
typeset -g POWERLEVEL9K_PROMPT_CHAR_PROMPT_ON_NEWLINE=true
typeset -g POWERLEVEL9K_TRANSIENT_PROMPT=always
typeset -g POWERLEVEL9K_DIR_SHOW_WRITABLE=true
typeset -g POWERLEVEL9K_VCS_BRANCH_ICON='\uF126'
typeset -g POWERLEVEL9K_VCS_UNTRACKED_ICON='?'
typeset -g POWERLEVEL9K_VCS_MODIFIED_ICON='~'
typeset -g POWERLEVEL9K_VCS_STAGED_ICON='+'
typeset -g POWERLEVEL9K_VCS_RENAMED_ICON='->'
typeset -g POWERLEVEL9K_VCS_DELETED_ICON='x'
typeset -g POWERLEVEL9K_VCS_CONFLICTED_ICON='!'
typeset -g POWERLEVEL9K_VCS_COMMIT_ICON='\uF417'
typeset -g POWERLEVEL9K_VCS_INCOMING_CHANGES_ICON='\uF01A '
typeset -g POWERLEVEL9K_VCS_OUTGOING_CHANGES_ICON='\uF019 '
typeset -g POWERLEVEL9K_COMMAND_EXECUTION_TIME_THRESHOLD=0
typeset -g POWERLEVEL9K_COMMAND_EXECUTION_TIME_PRECISION=0
typeset -g POWERLEVEL9K_TIME_FORMAT='%D{%H:%M:%S}'
typeset -g POWERLEVEL9K_STATUS_OK_IN_NON_VERBOSE=true
typeset -g POWERLEVEL9K_STATUS_OK=false
typeset -g POWERLEVEL9K_STATUS_CROSS=true
typeset -g POWERLEVEL9K_OS_ICON_FOREGROUND=232
typeset -g POWERLEVEL9K_OS_ICON_BACKGROUND=7
typeset -g POWERLEVEL9K_TIME_FOREGROUND=254
typeset -g POWERLEVEL9K_TIME_BACKGROUND=238
typeset -g POWERLEVEL9K_COMMAND_EXECUTION_TIME_FOREGROUND=254
typeset -g POWERLEVEL9K_COMMAND_EXECUTION_TIME_BACKGROUND=238
typeset -g POWERLEVEL9K_STATUS_ERROR_FOREGROUND=1
typeset -g POWERLEVEL9K_STATUS_ERROR_BACKGROUND=15
typeset -g POWERLEVEL9K_STATUS_OK_FOREGROUND=2
typeset -g POWERLEVEL9K_STATUS_OK_BACKGROUND=15
source ${(M)config_files:#*/p10k.zsh}
EOF
fi

# --- 8. AUTOMATION: Create iTerm2 Dynamic Profile named "tany" ---
DYNAMIC_PROFILE_DIR="$HOME/Library/Application Support/iTerm2/DynamicProfiles"
DYNAMIC_PROFILE_FILE="$DYNAMIC_PROFILE_DIR/tany.json"

if [ -f "$DYNAMIC_PROFILE_FILE" ]; then
  echo "âœ… iTerm2 'tany' dynamic profile already exists. Skipping."
else
  echo "Creating iTerm2 'tany' dynamic profile..."
  mkdir -p "$DYNAMIC_PROFILE_DIR"
  
  cat << 'EOF' > "$DYNAMIC_PROFILE_FILE"
{
  "Profiles": [
    {
      "Name": "tany",
      "Guid": "tany-Gemini",
      "Normal Font": "HackNerdFont-Regular 14",
      "Non-ASCII Font": "HackNerdFont-Regular 14",
      "Use Non-ASCII Font": true,
      "Unlimited Scrollback": true,
      "Natural Text Editing": true,
      "Silence Bell": true
    }
  ]
}
EOF
fi

# --- 9. NEW: Install vim-plug (Plugin Manager for Neovim) ---
PLUG_VIM_FILE="$HOME/.local/share/nvim/site/autoload/plug.vim"
if [ -f "$PLUG_VIM_FILE" ]; then
  echo "âœ… vim-plug is already installed. Skipping."
else
  echo "Installing vim-plug for Neovim..."
  curl -fLo "$PLUG_VIM_FILE" --create-dirs \
    https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
fi

# --- 10. NEW: Create starter Neovim config (init.vim) ---
NVIM_CONFIG_DIR="$HOME/.config/nvim"
NVIM_CONFIG_FILE="$NVIM_CONFIG_DIR/init.vim"

if [ -f "$NVIM_CONFIG_FILE" ]; then
  echo "âœ… $NVIM_CONFIG_FILE already exists. Skipping."
else
  echo "Creating starter Neovim config at $NVIM_CONFIG_FILE..."
  mkdir -p "$NVIM_CONFIG_DIR"
  cat << 'EOF' > "$NVIM_CONFIG_FILE"
" --- Start of vim-plug config ---
call plug#begin('~/.local/share/nvim/plugged')

" A solid theme
Plug 'dracula/vim'

" File explorer
Plug 'preservim/nerdtree'

" Status line
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'

" Code/Syntax highlighting
Plug 'preservim/tagbar'
Plug 'sheerun/vim-polyglot'

" Initialize plugin system
call plug#end()
" --- End of vim-plug config ---

" --- Basic Settings ---
syntax on
set number
set relativenumber
set cursorline
set termguicolors
set background=dark

" Theme
colorscheme dracula

" Keymaps
let mapleader = " "
nnoremap <leader>n :NERDTreeToggle<CR>
nnoremap <leader>t :TagbarToggle<CR>
EOF
fi

# --- 11. NEW: Install Neovim plugins automatically ---
# This runs nvim in the background, executes PlugInstall, and quits.
if [ -f "$NVIM_CONFIG_FILE" ]; then
    echo "Installing/Updating Neovim plugins..."
    nvim --headless +PlugInstall +qall
    echo "âœ… Neovim plugins are ready."
else
    echo "Skipping plugin install as $NVIM_CONFIG_FILE was not created by this script."
fi

echo ""
echo "ðŸŽ‰ --- AUTOMATION COMPLETE! --- ðŸŽ‰"
echo ""
echo "Your terminal is now fully upgraded. Neovim is configured and its plugins are installed."
echo ""
echo "There is ONLY ONE final manual step:"
echo ""
echo "1. Quit and Relaunch iTerm2."
echo "2. Go to Settings (Press 'Cmd + ,')."
echo "3. Go to the 'Profiles' tab."
echo "4. You will see a new profile named 'tany'."
echo "5. Click 'tany', then click 'Other Actions...' at the bottom."
echo "6. Select 'Set as Default'."
echo ""
echo "All new windows will now use the correct font and theme automatically!"
